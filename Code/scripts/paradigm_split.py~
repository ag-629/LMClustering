from argparse import ArgumentParser
from collections import defaultdict
import time, sys, re, pandas as pd


# Python3 implementation to print
# the longest common substring
 
# function to find and print 
# the longest common substring of
# X[0..m-1] and Y[0..n-1]
def LCSubStr(X: str, Y: str,
                   m: int, n: int):
 
    # Create a table to store lengths of
    # longest common suffixes of substrings.
    # Note that LCSuff[i][j] contains length
    # of longest common suffix of X[0..i-1] and
    # Y[0..j-1]. The first row and first
    # column entries have no logical meaning,
    # they are used only for simplicity of program
    LCSuff = [[0 for i in range(n + 1)]
                 for j in range(m + 1)]
 
    # To store length of the
    # longest common substring
    length = 0
 
    # To store the index of the cell
    # which contains the maximum value.
    # This cell's index helps in building
    # up the longest common substring
    # from right to left.
    row, col = 0, 0
 
    # Following steps build LCSuff[m+1][n+1]
    # in bottom up fashion.
    for i in range(m + 1):
        for j in range(n + 1):
            if i == 0 or j == 0:
                LCSuff[i][j] = 0
            elif X[i - 1] == Y[j - 1]:
                LCSuff[i][j] = LCSuff[i - 1][j - 1] + 1
                if length < LCSuff[i][j]:
                    length = LCSuff[i][j]
                    row = i
                    col = j
            else:
                LCSuff[i][j] = 0
 
    # if true, then no common substring exists
    if length == 0:
        #print("No Common Substring")
        return ''
 
    # allocate space for the longest
    # common substring
    resultStr = ['0'] * length
 
    # traverse up diagonally form the
    # (row, col) cell until LCSuff[row][col] != 0
    while LCSuff[row][col] != 0:
        length -= 1
        resultStr[length] = X[row - 1] # or Y[col-1]
 
        # move diagonally up to previous cell
        row -= 1
        col -= 1
 
    # required longest common substring
    return ''.join(resultStr)


def LCS(paradigm):
    substr = ''
    if len(paradigm) > 1 and len(paradigm[0]) > 0:
        for i in range(len(paradigm[0])):
            for j in range(len(paradigm[0])-i+1):
                if j > len(substr) and all(paradigm[0][i:i+j] in x for x in paradigm):
                    substr = paradigm[0][i:i+j]
    return substr


if __name__ == '__main__':

    parser = ArgumentParser(description = 'Group paradigms by stems and siffixes')
    parser.add_argument('gold_path', help = 'Path to gold paradigm file')
    parser.add_argument('lang', help = "Language (don't for get 'reverse if applicable)")
    args = parser.parse_args()
    start = time.time()
    with open(args.gold_path, 'r', encoding = 'utf-8') as f:
        
        text = f.read()
        text_list = text.split("\n\n")
        paradigms_dict = {i:text_list[i].split() for i in range(len(text_list))}
        paradigms_sorted = sorted(paradigms_dict.values(), key = lambda x : len(x), reverse = True)
        paradigms = [p for p in paradigms_sorted]
        df = pd.DataFrame(columns = ('Token','LCS_Start','LCS_End','Prefix_Start','Prefix_End','Suffix_Start'))
        row_index = 0

        for p in paradigms:
            
            lcs_idxs = []
            curr_row_list = []
            lcs = LCS(p)

            if len(lcs) < 2:
                print(f"No Common Substring for the paradigm {p}")
                print('LCS: ', lcs)
            else:
                for w in p:
                    lcs_idxs.append(w.index(lcs))
                    
            for idx, w in zip(lcs_idxs, p):
                row = {'Token':str(w), 'LCS_Start':str(idx), 'LCS_End': str(idx+len(lcs)), 'Prefix_Start':str(0), 'Prefix_End':str(idx), 'Suffix_Start':str(idx+len(lcs))}
                curr_row_list.append(row)

            for r in curr_row_list: 
                to_add = pd.Series(r, name = row_index)
                df = df.append(to_add)
                row_index = row_index + 1
        df.to_csv(args.lang+'_LCS.tsv', sep='\t')
    print(str(time.time() - start)+'s')
